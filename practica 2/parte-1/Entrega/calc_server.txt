/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

// Este servidor también funciona como cliente de otro servidor, para
// la versión de una calculadora concurrente.
#include "calc.h"
#include "calc_concurrente.h"
void mostrarVector (const Vector * vector){
	// Recorrer vector mostrando elementos uno a uno
	for (int i = 0; i < vector->size; i++){
		printf("%f ", vector->datos[i]);
	}
	printf("\n");
}

double *
sumar_1_svc(Operacion arg1,  struct svc_req *rqstp)
{
	static double  result;

	printf("Estamos sumando\n");
	result = arg1.operando1 + arg1.operando2;

	return &result;
}

double *
restar_1_svc(Operacion arg1,  struct svc_req *rqstp)
{
	static double  result;

	printf("Estamos restando\n");
	result = arg1.operando1 - arg1.operando2;
	return &result;
}

double *
multiplicar_1_svc(Operacion arg1,  struct svc_req *rqstp)
{
	static double  result;

	printf("Estamos multiplicando\n");
	result = arg1.operando1 * arg1.operando2;
	return &result;
}

double *
dividir_1_svc(Operacion arg1,  struct svc_req *rqstp)
{
	static double  result;

	printf("Estamos dividiendo\n");
	result = arg1.operando1 / arg1.operando2;

	return &result;
}

double *
media_vector_1_svc(Vector vector,  struct svc_req *rqstp)
{
	static double result = 0;
	double suma_parcial = 0;

	printf("Realizando media de vector\n");
	for (int i = 0; i < vector.size; ++i) suma_parcial += vector.datos[i];
	result = suma_parcial/vector.size;

	return &result;
}

Vector *
multiplicar_escalar_1_svc(Vector vector, double escalar,  struct svc_req *rqstp)
{
	static Vector result;

	printf("Estamos haciendo una multiplicación por escalar\n");
	for (int i = 0; i < vector.size; i++) vector.datos[i] *= escalar;

	result = vector;
	return &result;
}

long *
sumatoria_1_svc(int n,  struct svc_req *rqstp)
{
	static long  result;

	int res_parcial_1 = 0;
	int res_parcial_2 = calcconcurprog_1("localhost", n/2, n);

	printf("Estamos calculando el sumatoria de %d\n", n);

	for (int i = 1; i < n/2; ++i) {
		res_parcial_1 += i;
		printf("resultado en main: %d\n", res_parcial_1);
	}

	result = res_parcial_1 + res_parcial_2;
   return &result;
}


///////////////////////////////////////////////////////////////////////////////
// Funcion para llamar a otro servidor, se usara a modo de servidor
// auxiliar, es decir, se llamara para distribuir con el la carga
int
calcconcurprog_1(char *host, int inicio, int final)
{
	CLIENT *clnt;
	int  *result_1;
	int sumatoria_auxiliar_1_inicio = inicio;
	int sumatoria_auxiliar_1_final = final;

#ifndef	DEBUG
	clnt = clnt_create (host, CALCCONCURPROG, CCV1, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

	result_1 = sumatoria_auxiliar_1(sumatoria_auxiliar_1_inicio, sumatoria_auxiliar_1_final, clnt);
	if (result_1 == (long *) NULL) {
		clnt_perror (clnt, "call failed");
	}
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */

	return (*result_1);
}
