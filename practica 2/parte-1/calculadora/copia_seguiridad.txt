/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "calc.h"


double
calcprog_1(char *server, Operacion opera)
{
	CLIENT *clnt;
	double  *result_1;
	Operacion * sumar_1_arg1 = &opera;

	printf("%s\n", "aun no se ha roto");
#ifndef	DEBUG
	clnt = clnt_create (server, CALCPROG, CALCVER, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (server);
		exit (1);
	}
#endif	/* DEBUG */

	result_1 = sumar_1(sumar_1_arg1, clnt);
	if (result_1 == (double *) NULL) {
		clnt_perror (clnt, "call failed");
	}
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */

	return (*result_1);
}


int
main (int argc, char *argv[])
{
	char *server;

	if (argc < 4) {
		printf ("usage: %s <server ip> <operando1> <operador> <operando2>\n", argv[0]);
		exit (1);
	}
	server = argv[1];

	Operacion opera;
	opera.operando1 = 1;
	opera.operando2 = 2;

	printf("%s\n", "aun no se ha roto");

	double resultado = calcprog_1 (server, opera);
	printf("%s %f\n", "El resultado es: ", resultado);


	exit (0);
}


//////////////////////////////////////////////////////////////////////////////////

/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "calc.h"

double *
sumar_1_svc(Operacion * arg1,  struct svc_req *rqstp)
{
	static double  result;

	if (arg1 == NULL) {
		printf("Arg1 es nulo aun\n");
	} else {
		printf("Voy a sumar %f y %f\n", arg1->operando1, arg1->operando2);
		result = arg1->operando1 + arg1->operando2;
	}

	return &result;
}
