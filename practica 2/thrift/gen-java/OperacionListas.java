/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OperacionListas implements org.apache.thrift.TBase<OperacionListas, OperacionListas._Fields>, java.io.Serializable, Cloneable, Comparable<OperacionListas> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OperacionListas");

  private static final org.apache.thrift.protocol.TField L1_FIELD_DESC = new org.apache.thrift.protocol.TField("l1", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField L2_FIELD_DESC = new org.apache.thrift.protocol.TField("l2", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TIPO_FIELD_DESC = new org.apache.thrift.protocol.TField("tipo", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OperacionListasStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OperacionListasTupleSchemeFactory());
  }

  public List<Double> l1; // required
  public List<Double> l2; // required
  /**
   * 
   * @see TipoOperacion
   */
  public TipoOperacion tipo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    L1((short)1, "l1"),
    L2((short)2, "l2"),
    /**
     * 
     * @see TipoOperacion
     */
    TIPO((short)3, "tipo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // L1
          return L1;
        case 2: // L2
          return L2;
        case 3: // TIPO
          return TIPO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.L1, new org.apache.thrift.meta_data.FieldMetaData("l1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "MiLista")));
    tmpMap.put(_Fields.L2, new org.apache.thrift.meta_data.FieldMetaData("l2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "MiLista")));
    tmpMap.put(_Fields.TIPO, new org.apache.thrift.meta_data.FieldMetaData("tipo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TipoOperacion.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OperacionListas.class, metaDataMap);
  }

  public OperacionListas() {
  }

  public OperacionListas(
    List<Double> l1,
    List<Double> l2,
    TipoOperacion tipo)
  {
    this();
    this.l1 = l1;
    this.l2 = l2;
    this.tipo = tipo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OperacionListas(OperacionListas other) {
    if (other.isSetL1()) {
      this.l1 = other.l1;
    }
    if (other.isSetL2()) {
      this.l2 = other.l2;
    }
    if (other.isSetTipo()) {
      this.tipo = other.tipo;
    }
  }

  public OperacionListas deepCopy() {
    return new OperacionListas(this);
  }

  @Override
  public void clear() {
    this.l1 = null;
    this.l2 = null;
    this.tipo = null;
  }

  public int getL1Size() {
    return (this.l1 == null) ? 0 : this.l1.size();
  }

  public java.util.Iterator<Double> getL1Iterator() {
    return (this.l1 == null) ? null : this.l1.iterator();
  }

  public void addToL1(double elem) {
    if (this.l1 == null) {
      this.l1 = new ArrayList<Double>();
    }
    this.l1.add(elem);
  }

  public List<Double> getL1() {
    return this.l1;
  }

  public OperacionListas setL1(List<Double> l1) {
    this.l1 = l1;
    return this;
  }

  public void unsetL1() {
    this.l1 = null;
  }

  /** Returns true if field l1 is set (has been assigned a value) and false otherwise */
  public boolean isSetL1() {
    return this.l1 != null;
  }

  public void setL1IsSet(boolean value) {
    if (!value) {
      this.l1 = null;
    }
  }

  public int getL2Size() {
    return (this.l2 == null) ? 0 : this.l2.size();
  }

  public java.util.Iterator<Double> getL2Iterator() {
    return (this.l2 == null) ? null : this.l2.iterator();
  }

  public void addToL2(double elem) {
    if (this.l2 == null) {
      this.l2 = new ArrayList<Double>();
    }
    this.l2.add(elem);
  }

  public List<Double> getL2() {
    return this.l2;
  }

  public OperacionListas setL2(List<Double> l2) {
    this.l2 = l2;
    return this;
  }

  public void unsetL2() {
    this.l2 = null;
  }

  /** Returns true if field l2 is set (has been assigned a value) and false otherwise */
  public boolean isSetL2() {
    return this.l2 != null;
  }

  public void setL2IsSet(boolean value) {
    if (!value) {
      this.l2 = null;
    }
  }

  /**
   * 
   * @see TipoOperacion
   */
  public TipoOperacion getTipo() {
    return this.tipo;
  }

  /**
   * 
   * @see TipoOperacion
   */
  public OperacionListas setTipo(TipoOperacion tipo) {
    this.tipo = tipo;
    return this;
  }

  public void unsetTipo() {
    this.tipo = null;
  }

  /** Returns true if field tipo is set (has been assigned a value) and false otherwise */
  public boolean isSetTipo() {
    return this.tipo != null;
  }

  public void setTipoIsSet(boolean value) {
    if (!value) {
      this.tipo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case L1:
      if (value == null) {
        unsetL1();
      } else {
        setL1((List<Double>)value);
      }
      break;

    case L2:
      if (value == null) {
        unsetL2();
      } else {
        setL2((List<Double>)value);
      }
      break;

    case TIPO:
      if (value == null) {
        unsetTipo();
      } else {
        setTipo((TipoOperacion)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case L1:
      return getL1();

    case L2:
      return getL2();

    case TIPO:
      return getTipo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case L1:
      return isSetL1();
    case L2:
      return isSetL2();
    case TIPO:
      return isSetTipo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OperacionListas)
      return this.equals((OperacionListas)that);
    return false;
  }

  public boolean equals(OperacionListas that) {
    if (that == null)
      return false;

    boolean this_present_l1 = true && this.isSetL1();
    boolean that_present_l1 = true && that.isSetL1();
    if (this_present_l1 || that_present_l1) {
      if (!(this_present_l1 && that_present_l1))
        return false;
      if (!this.l1.equals(that.l1))
        return false;
    }

    boolean this_present_l2 = true && this.isSetL2();
    boolean that_present_l2 = true && that.isSetL2();
    if (this_present_l2 || that_present_l2) {
      if (!(this_present_l2 && that_present_l2))
        return false;
      if (!this.l2.equals(that.l2))
        return false;
    }

    boolean this_present_tipo = true && this.isSetTipo();
    boolean that_present_tipo = true && that.isSetTipo();
    if (this_present_tipo || that_present_tipo) {
      if (!(this_present_tipo && that_present_tipo))
        return false;
      if (!this.tipo.equals(that.tipo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(OperacionListas other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetL1()).compareTo(other.isSetL1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetL1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.l1, other.l1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetL2()).compareTo(other.isSetL2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetL2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.l2, other.l2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTipo()).compareTo(other.isSetTipo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTipo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tipo, other.tipo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OperacionListas(");
    boolean first = true;

    sb.append("l1:");
    if (this.l1 == null) {
      sb.append("null");
    } else {
      sb.append(this.l1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("l2:");
    if (this.l2 == null) {
      sb.append("null");
    } else {
      sb.append(this.l2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tipo:");
    if (this.tipo == null) {
      sb.append("null");
    } else {
      sb.append(this.tipo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OperacionListasStandardSchemeFactory implements SchemeFactory {
    public OperacionListasStandardScheme getScheme() {
      return new OperacionListasStandardScheme();
    }
  }

  private static class OperacionListasStandardScheme extends StandardScheme<OperacionListas> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OperacionListas struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // L1
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.l1 = new ArrayList<Double>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  double _elem2;
                  _elem2 = iprot.readDouble();
                  struct.l1.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setL1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // L2
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.l2 = new ArrayList<Double>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  double _elem5;
                  _elem5 = iprot.readDouble();
                  struct.l2.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setL2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIPO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tipo = TipoOperacion.findByValue(iprot.readI32());
              struct.setTipoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OperacionListas struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.l1 != null) {
        oprot.writeFieldBegin(L1_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.l1.size()));
          for (double _iter6 : struct.l1)
          {
            oprot.writeDouble(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.l2 != null) {
        oprot.writeFieldBegin(L2_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.l2.size()));
          for (double _iter7 : struct.l2)
          {
            oprot.writeDouble(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tipo != null) {
        oprot.writeFieldBegin(TIPO_FIELD_DESC);
        oprot.writeI32(struct.tipo.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OperacionListasTupleSchemeFactory implements SchemeFactory {
    public OperacionListasTupleScheme getScheme() {
      return new OperacionListasTupleScheme();
    }
  }

  private static class OperacionListasTupleScheme extends TupleScheme<OperacionListas> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OperacionListas struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetL1()) {
        optionals.set(0);
      }
      if (struct.isSetL2()) {
        optionals.set(1);
      }
      if (struct.isSetTipo()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetL1()) {
        {
          oprot.writeI32(struct.l1.size());
          for (double _iter8 : struct.l1)
          {
            oprot.writeDouble(_iter8);
          }
        }
      }
      if (struct.isSetL2()) {
        {
          oprot.writeI32(struct.l2.size());
          for (double _iter9 : struct.l2)
          {
            oprot.writeDouble(_iter9);
          }
        }
      }
      if (struct.isSetTipo()) {
        oprot.writeI32(struct.tipo.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OperacionListas struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.l1 = new ArrayList<Double>(_list10.size);
          for (int _i11 = 0; _i11 < _list10.size; ++_i11)
          {
            double _elem12;
            _elem12 = iprot.readDouble();
            struct.l1.add(_elem12);
          }
        }
        struct.setL1IsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.l2 = new ArrayList<Double>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            double _elem15;
            _elem15 = iprot.readDouble();
            struct.l2.add(_elem15);
          }
        }
        struct.setL2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.tipo = TipoOperacion.findByValue(iprot.readI32());
        struct.setTipoIsSet(true);
      }
    }
  }

}

